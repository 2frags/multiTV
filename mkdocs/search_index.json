{
    "docs": [
        {
            "location": "/", 
            "text": "multiTV\n\n\nmultiTV\n is a package for MODX Evolution content management framework.\n\n\nFeatures\n\n\nWith this MODX Evolution package a new template variable type is introduced. The template variable could contain a sortable multi item list or a datatable.\n\n\nThe package contains three main parts\n\n\n\n\na custom template variabe displaying and editing a sortable multi item list or a datatable\n\n\na snippet to display the value of the template variable\n\n\na module do edit the content of custom database tables.\n\n\n\n\nand some extras\n\n\n\n\na PHx modifier\n\n\na Ditto filter extender\n\n\na snippet for old installations to update the template variable content to the new format introduced with version 1.4.11.\n\n\n\n\nScreenshots\n\n\n\n    \n\n\n\n\nEvents (horizontal mode)\n\n\n\n    \n\n\n\n\nImages example (vertical mode)\n\n\n\n    \n\n\n\n\nLinks (datatable mode)\n\n\n\n    \n\n\n\n\nEdit Link (datatable mode)\n\n\n\n    \n\n\n\n\nDatabase Manager (log_event configuration)\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Home"
        }, 
        {
            "location": "/#multitv", 
            "text": "multiTV  is a package for MODX Evolution content management framework.", 
            "title": "multiTV"
        }, 
        {
            "location": "/#features", 
            "text": "With this MODX Evolution package a new template variable type is introduced. The template variable could contain a sortable multi item list or a datatable.  The package contains three main parts   a custom template variabe displaying and editing a sortable multi item list or a datatable  a snippet to display the value of the template variable  a module do edit the content of custom database tables.   and some extras   a PHx modifier  a Ditto filter extender  a snippet for old installations to update the template variable content to the new format introduced with version 1.4.11.", 
            "title": "Features"
        }, 
        {
            "location": "/#screenshots", 
            "text": "Events (horizontal mode)  \n       Images example (vertical mode)  \n       Links (datatable mode)  \n       Edit Link (datatable mode)  \n       Database Manager (log_event configuration)   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Screenshots"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nThere are two possibilities to install multiTV in MODX Evolution\n\n\n\n\nUse the MODX Evolution \nPackage Manager\n and install the \nlatest multiTV package\n\n\nInstall it on your own:\n\n\nUpload the folder \nassets/tvs/multitv\n in the corresponding folder in your installation.\n\n\nCreate a new template variable with imput type \ncustom input\n (if you name this template variable \nmultidemo\n it will use the already uploaded multidemo config file)\n\n\nInsert the following code into the \ninput option values\n\n\n@INCLUDE/assets/tvs/multitv/multitv.customtv.php\n\n\nCreate a new snippet called multiTV with the following snippet code\n\n?php return include(MODX_BASE_PATH.'assets/tvs/multitv/multitv.snippet.php'); ?\n\n\n\n\n\n\n\n\nCompatibility patches\n\n\n\n\nIf you want to modify the multiTV with ManagerManager\n1\n \nbefore MODX version 1.0.9\n you have to patch the file mm.inc.php and insert\n\ncase 'custom_tv':\n in line 136 just before the line\n\n$t = 'textarea';\n\n\nIf you want to use multiTV with YAMS you have to patch yams.plugin.inc.php according to the instructions on this \nissue comment\n.\n\n\nIf you are updating from 1.4.10 and below you could install the updateTV snippet and modify the data in your multiTVs to the new format. Since the custom tv and the snippet code supports the old and new format, this is only nessesary, if you want to add/remove columns in your multiTVs or if you want to sort the output by a column.\n\n\nIf you want to use PHx with multiTV you have to modify the PHx plugin code a bit:\n\n\n\n\nif (!class_exists('PHxParser')) {\n    include MODX_BASE_PATH . \nassets/plugins/phx/phx.parser.class.inc.php\n;\n}\n$e = \n$modx-\nEvent;\nswitch($e-\nname) {\n    case 'OnParseDocument':\n        $PHx = new PHxParser($phxdebug,$phxmaxpass);\n        $PHx-\nOnParseDocument();\n        break;\n}\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nManagerManager expects a custom tv field to be an input tag. Because of single and double quote issues the field containing the multiTV value is a textarea.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "There are two possibilities to install multiTV in MODX Evolution   Use the MODX Evolution  Package Manager  and install the  latest multiTV package  Install it on your own:  Upload the folder  assets/tvs/multitv  in the corresponding folder in your installation.  Create a new template variable with imput type  custom input  (if you name this template variable  multidemo  it will use the already uploaded multidemo config file)  Insert the following code into the  input option values  @INCLUDE/assets/tvs/multitv/multitv.customtv.php  Create a new snippet called multiTV with the following snippet code ?php return include(MODX_BASE_PATH.'assets/tvs/multitv/multitv.snippet.php'); ?", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#compatibility-patches", 
            "text": "If you want to modify the multiTV with ManagerManager 1   before MODX version 1.0.9  you have to patch the file mm.inc.php and insert case 'custom_tv':  in line 136 just before the line $t = 'textarea';  If you want to use multiTV with YAMS you have to patch yams.plugin.inc.php according to the instructions on this  issue comment .  If you are updating from 1.4.10 and below you could install the updateTV snippet and modify the data in your multiTVs to the new format. Since the custom tv and the snippet code supports the old and new format, this is only nessesary, if you want to add/remove columns in your multiTVs or if you want to sort the output by a column.  If you want to use PHx with multiTV you have to modify the PHx plugin code a bit:   if (!class_exists('PHxParser')) {\n    include MODX_BASE_PATH .  assets/plugins/phx/phx.parser.class.inc.php ;\n}\n$e =  $modx- Event;\nswitch($e- name) {\n    case 'OnParseDocument':\n        $PHx = new PHxParser($phxdebug,$phxmaxpass);\n        $PHx- OnParseDocument();\n        break;\n}   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();        ManagerManager expects a custom tv field to be an input tag. Because of single and double quote issues the field containing the multiTV value is a textarea.", 
            "title": "Compatibility patches"
        }, 
        {
            "location": "/template_variable/", 
            "text": "Template Variable\n\n\nAll options for a custom template variable are set in a PHP Array or JSON config file in the folder \nconfigs\n with the same name as the template variable (otherwise the default config is used) and \n.config.inc.php\n or \nconfig.json\n as extension (a JSON file is used in priority to PHP Array file).\n\n\nDisplay mode\n\n\nThe display mode of the input fields in the multi field list could be set in the key \ndisplay\n to \nhorizontal\n (events example), \nvertical\n (images example), \nsingle\n, \ndatatable\n (links or multicontent example) or \ndbtable\n (dbtabledemo example). A multiTV with single display configuration contains only one list element. With a multiTV in \ndbtable\n mode a (custom) table in the MODX database could be displayed and edited.\n\n\nFields\n\n\nThe fields of the multitv could be defined in the key \nfields\n. This key contains an array of fieldnames and each fieldname contains an array of field properties.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\nCaption (horizontal) or label (vertical) for the input\n\n\n-\n\n\n\n\n\n\ntype\n\n\nType of the input (could be set to almost all MODX input types\n1\n and \nthumb\n for thumbnail display of image tvs\n2\n)\n\n\ntext\n\n\n\n\n\n\nelements\n\n\nSame options as in the \ninput option values\n of a \nMODX template variable\n are possible i.e. for a dropdown with all documents in the MODX root: \n@SELECT `pagetitle`, `id` FROM `modx_site_content` WHERE parent = 0 ORDER BY `menuindex` ASC\n\n\n-\n\n\n\n\n\n\ndefault\n\n\nDefault value for the input. This value could contain calculated parts. There are two placeholders available: \n{i}\n contains an autoincremented index \n{alias}\n contains the alias of the edited document.\n\n\n-\n\n\n\n\n\n\nthumbof\n\n\nName of an image input. A thumbnail of the selected image will be rendered into this area\n\n\n-\n\n\n\n\n\n\nwidth\n\n\nWidth of the input\n\n\n100\n\n\n\n\n\n\n\n\nIn datatable mode a layer will be displayed during adding/editing one row. In this editing layer the MODX input type richtext is possible.\n\n\nColumns\n\n\nIn \ndatatable\n and \ndbtable\n mode the visible columns for the datatable could be defined in the key \ncolumns\n. This key contains an array of column settings. Each column setting contains an array of properties. If a property is not set, the field property in key \nfields\n is used.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nfieldname\n\n\n(required)\n Fieldname that is displayed in this column\n\n\n-\n\n\n\n\n\n\ncaption\n\n\nCaption of the column\n\n\nCaption for fieldname in \nfields\n\n\n\n\n\n\nwidth\n\n\nWidth of the column\n\n\nWidth for fieldname in \nfields\n\n\n\n\n\n\nrender\n\n\nEnable rengering of the column content with this PHx capable string\n\n\n-\n\n\n\n\n\n\nsortable\n\n\nEnable sorting for this column by clicking on the column header in \ndatatable\n or \ndbtable\n mode. Only active if sorting is disabled in \nother options\n\n\ntrue\n\n\n\n\n\n\n\n\nEditing Layer\n\n\nIn \ndatatable\n and \ndbtable\n mode the content of the editing layer could be defined in the key \nform\n. This key contains an array of form tab settings.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\n(required)\n Caption for the form tab\n\n\n-\n\n\n\n\n\n\ncontent\n\n\n(required)\n Associative array of field settings\n\n\n-\n\n\n\n\n\n\n\n\nEach form tab setting contains an associative array of field properties (the key contains the fieldname in \nfields\n). If a field property is not set, the field property in \nfields\n is used.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\nCaption for the input\n\n\nCaption for fieldname in \nfields\n\n\n\n\n\n\n\n\nDefault Output Templates\n\n\nThe default output templates for the multiTV snippet could be defined in the key \ntemplates\n.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrowTpl\n\n\nDefault row template chunk for the snippet output. Could be changed in snippet call. See \nsnippet documentation\n for possible placeholders\n\n\n-\n\n\n\n\n\n\nouterTpl\n\n\nDefault outer template chunk for the snippet output. Could be changed in snippet call. See \nsnippet documentation\n for possible placeholders\n\n\n-\n\n\n\n\n\n\n\n\nOther options\n\n\nThe other options for one multiTV could be defined in the key \nconfiguration\n.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncsvseparator\n\n\nColumn separator for csv clipboard table data. The csv clipboard table data should contain a new line for each row.\n\n\n,\n\n\n\n\n\n\ndisplayLength\n\n\nNumber of entries displayed by default in \ndatatable\n and \ndbtable\n mode.\n\n\n10\n\n\n\n\n\n\ndisplayLengthMenu\n\n\nEntries in the 'number of entries' selector in \ndatatable\n and \ndbtable\n mode.\n\n\n10,25,50,100\n\n\n\n\n\n\nenablePaste\n\n\nmultiTV could contain \npaste table data\n link that displays a paste box. In this box you could paste Word/HTML table clipboard data, Google Docs table clipboard data and csv data.\n\n\ntrue\n\n\n\n\n\n\nenableClear\n\n\nmultiTV could contain \nclear all\n link that clears the content of the multiTV\n\n\ntrue\n\n\n\n\n\n\nhideHeader\n\n\nHide the table header in \ndatatable\n and \ndbtable\n mode.\n\n\nfalse\n\n\n\n\n\n\nradioTabs\n\n\nTabs in the datatable editing layer are displayed as radio buttons. The button state is saved in \nfieldTab\n key of each multiTV row.\n\n\nfalse\n\n\n\n\n\n\nsortindex\n\n\nField that contains the sort index (to enable draggable sorting in the module or \ndbtable\n mode)\n\n\n-\n\n\n\n\n\n\nsorting\n\n\nEnable sorting by clicking on the column header in \ndatatable\n or \ndbtable\n mode. Row reordering by drag \n drop will be disabled.\n\n\nfalse\n\n\n\n\n\n\n\n\nSee the \nmultidemo config\n for all usable vertical settings and the \nmulticontent config\n for all usable datatable settings.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSupported MODX input types: text, rawtext, email, number, textareamini, textarea, rawtextarea, htmlarea, date, dropdown, listbox, listbox-multiple, checkbox, option, image, file\n\n\n\n\n\n\nSee \nimages config\n for thumb", 
            "title": "Template Variable"
        }, 
        {
            "location": "/template_variable/#template-variable", 
            "text": "All options for a custom template variable are set in a PHP Array or JSON config file in the folder  configs  with the same name as the template variable (otherwise the default config is used) and  .config.inc.php  or  config.json  as extension (a JSON file is used in priority to PHP Array file).", 
            "title": "Template Variable"
        }, 
        {
            "location": "/template_variable/#display-mode", 
            "text": "The display mode of the input fields in the multi field list could be set in the key  display  to  horizontal  (events example),  vertical  (images example),  single ,  datatable  (links or multicontent example) or  dbtable  (dbtabledemo example). A multiTV with single display configuration contains only one list element. With a multiTV in  dbtable  mode a (custom) table in the MODX database could be displayed and edited.", 
            "title": "Display mode"
        }, 
        {
            "location": "/template_variable/#fields", 
            "text": "The fields of the multitv could be defined in the key  fields . This key contains an array of fieldnames and each fieldname contains an array of field properties.     Property  Description  Default      caption  Caption (horizontal) or label (vertical) for the input  -    type  Type of the input (could be set to almost all MODX input types 1  and  thumb  for thumbnail display of image tvs 2 )  text    elements  Same options as in the  input option values  of a  MODX template variable  are possible i.e. for a dropdown with all documents in the MODX root:  @SELECT `pagetitle`, `id` FROM `modx_site_content` WHERE parent = 0 ORDER BY `menuindex` ASC  -    default  Default value for the input. This value could contain calculated parts. There are two placeholders available:  {i}  contains an autoincremented index  {alias}  contains the alias of the edited document.  -    thumbof  Name of an image input. A thumbnail of the selected image will be rendered into this area  -    width  Width of the input  100     In datatable mode a layer will be displayed during adding/editing one row. In this editing layer the MODX input type richtext is possible.", 
            "title": "Fields"
        }, 
        {
            "location": "/template_variable/#columns", 
            "text": "In  datatable  and  dbtable  mode the visible columns for the datatable could be defined in the key  columns . This key contains an array of column settings. Each column setting contains an array of properties. If a property is not set, the field property in key  fields  is used.     Property  Description  Default      fieldname  (required)  Fieldname that is displayed in this column  -    caption  Caption of the column  Caption for fieldname in  fields    width  Width of the column  Width for fieldname in  fields    render  Enable rengering of the column content with this PHx capable string  -    sortable  Enable sorting for this column by clicking on the column header in  datatable  or  dbtable  mode. Only active if sorting is disabled in  other options  true", 
            "title": "Columns"
        }, 
        {
            "location": "/template_variable/#editing-layer", 
            "text": "In  datatable  and  dbtable  mode the content of the editing layer could be defined in the key  form . This key contains an array of form tab settings.     Property  Description  Default      caption  (required)  Caption for the form tab  -    content  (required)  Associative array of field settings  -     Each form tab setting contains an associative array of field properties (the key contains the fieldname in  fields ). If a field property is not set, the field property in  fields  is used.     Property  Description  Default      caption  Caption for the input  Caption for fieldname in  fields", 
            "title": "Editing Layer"
        }, 
        {
            "location": "/template_variable/#default-output-templates", 
            "text": "The default output templates for the multiTV snippet could be defined in the key  templates .     Property  Description  Default      rowTpl  Default row template chunk for the snippet output. Could be changed in snippet call. See  snippet documentation  for possible placeholders  -    outerTpl  Default outer template chunk for the snippet output. Could be changed in snippet call. See  snippet documentation  for possible placeholders  -", 
            "title": "Default Output Templates"
        }, 
        {
            "location": "/template_variable/#other-options", 
            "text": "The other options for one multiTV could be defined in the key  configuration .     Property  Description  Default      csvseparator  Column separator for csv clipboard table data. The csv clipboard table data should contain a new line for each row.  ,    displayLength  Number of entries displayed by default in  datatable  and  dbtable  mode.  10    displayLengthMenu  Entries in the 'number of entries' selector in  datatable  and  dbtable  mode.  10,25,50,100    enablePaste  multiTV could contain  paste table data  link that displays a paste box. In this box you could paste Word/HTML table clipboard data, Google Docs table clipboard data and csv data.  true    enableClear  multiTV could contain  clear all  link that clears the content of the multiTV  true    hideHeader  Hide the table header in  datatable  and  dbtable  mode.  false    radioTabs  Tabs in the datatable editing layer are displayed as radio buttons. The button state is saved in  fieldTab  key of each multiTV row.  false    sortindex  Field that contains the sort index (to enable draggable sorting in the module or  dbtable  mode)  -    sorting  Enable sorting by clicking on the column header in  datatable  or  dbtable  mode. Row reordering by drag   drop will be disabled.  false     See the  multidemo config  for all usable vertical settings and the  multicontent config  for all usable datatable settings.   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();        Supported MODX input types: text, rawtext, email, number, textareamini, textarea, rawtextarea, htmlarea, date, dropdown, listbox, listbox-multiple, checkbox, option, image, file    See  images config  for thumb", 
            "title": "Other options"
        }, 
        {
            "location": "/snippet/", 
            "text": "Snippet\n\n\nThe multiTV snippet has to be called to display the content of a multiTV template variable. Call the snippet like this (most expample parameters are using the default values in this example call and could be removed from the call \u2013 parameter tvName is required)\n\n\n[!multiTV?\n\ntvName=`yourMultiTVname`\n\ndocid=`[*id*]`\n\ntplConfig=``\n\nouterTpl=`@CODE:\nul\n((wrapper))\n/ul\n`\n\nrowTpl=`@CODE:\nli\n((event)), ((location)), ((price))\n/li\n`\n\ndisplay=`5`\n\noffset=`0`\n\nrows=`all`\n\nwhere=``\n\nrandomize=`0`\n\nreverse=`0`\n\norderBy=``\n\ntoPlaceholder=``\n\ntoJson=`0`\n\npublished=`1`\n\nemptyOutput=`1`\n\nnoResults=``\n\noutputSeparator=``\n\nfirstClass=`first`\n\nlastClass=`last`\n\nevenClass=``\n\noddClass=``\n\npaginate=`0`\n\noffsetKey=`page`\n!]\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntvName\n\n\n(required)\n Name of the template variable that contains the multiTV (the column names of the mulitTV are received from the config file)\n\n\n-\n\n\n\n\n\n\ndocid\n\n\nDocument id where the custom tv is retreived from (i.e. if the multiTV Snippet is called in a Ditto template)\n\n\nCurrent document id\n\n\n\n\n\n\ntplConfig\n\n\nArray key in the config file that contains the output templates configuration (will be prefixed with \ntemplates\n)\n\n\n''\n\n\n\n\n\n\nouterTpl\n\n\nOuter template: chunkname, filename (value starts with \n@FILE\n) or code (value starts with \n@CODE\n \u2013 placeholders have to be masked by \n((\n and \n))\n. Usable \nplaceholders\n. \n1\n\n\n@CODE:\nselect name=\"$tvName\"\n[+wrapper+]\n/select\n or custom template in template variable config file\n\n\n\n\n\n\nrowTpl\n\n\nRow template: chunkname, filename (value starts with \n@FILE\n) or code (value starts with \n@CODE\n \u2013 placeholders have to be masked by \n((\n and \n))\n. Usable \nplaceholders\n. \n1\n\n\n@CODE:\noption value=\"[+value+]\"\n[+key+]\n/option\n or custom template in template variable config file\n\n\n\n\n\n\ndisplay\n\n\nCount of rows that are displayed, \nall\n for all rows\n\n\n5\n\n\n\n\n\n\noffset\n\n\nCount of rows from start that are not displayed\n\n\n0\n\n\n\n\n\n\nrows\n\n\nComma separated list of row numbers (or all rows) that should be displayed\n\n\nall\n\n\n\n\n\n\nwhere\n\n\nJSON encoded array of where clauses to filter the results. Example \nclauses\n.\n\n\n-\n\n\n\n\n\n\nrandomize\n\n\nRandom order of displayed rows (disables \nreverse\n and \norderBy\n parameter)\n\n\n0\n\n\n\n\n\n\nreverse\n\n\nReverse order of displayed rows (disables \norderBy\n parameter)\n\n\n0\n\n\n\n\n\n\norderBy\n\n\nColumn name, column order type and order direction to sort the output (format: \nname:type direction\n \u2013 type could be \ntext\n or \ndate\n, defaults to \ntext\n \u2013 direction defaults to \nasc\n)\n\n\n-\n\n\n\n\n\n\ntoPlaceholder\n\n\nThe snippet output is assigned to a placeholder named as the parameter value (i.e. [+myPlaceholder+]), single items are assigned to placeholders named as the parameter value followed by the row number (i.e. [+myPlaceholder.1+]). Normal snippet output is suppressed.\n2\n\n\n-\n\n\n\n\n\n\ntoJson\n\n\nThe snippet output contains the json encoded result of the multitv snippet call. Useful to retreive the multiTV results other snippets by runSnippet\n\n\n0\n\n\n\n\n\n\npublished\n\n\nDisplay only multiTVs of published (1), unpublished (0) or both (2) kind of documents\n\n\n1\n\n\n\n\n\n\nemptyOutput\n\n\nReturn empty string if the multiTV is empty, otherwise return outer template\n\n\n1\n\n\n\n\n\n\nnoResults\n\n\nNo results template: chunkname, filename (value starts with \n@FILE\n) or code (value starts with \n@CODE\n)\n\n\n-\n\n\n\n\n\n\noutputSeparator\n\n\nString inserted between two row templates\n\n\nempty\n\n\n\n\n\n\nfirstClass\n\n\nContent of row.class placeholder in the first row\n\n\nfirst\n\n\n\n\n\n\nlastClass\n\n\nContent of row.class placeholder in the last row\n\n\nlast\n\n\n\n\n\n\nevenClass\n\n\nContent of row.class placeholder in an even row\n\n\n-\n\n\n\n\n\n\noddClass\n\n\nContent of row.class placeholder in an odd row\n\n\n-\n\n\n\n\n\n\npaginate\n\n\nShow pagination\n\n\n0\n\n\n\n\n\n\noffsetKey\n\n\nPagination offset parameter key\n\n\npage\n\n\n\n\n\n\n\n\nThe default templates for outer template and row template could be defined in the config file for the custom template variable. These custom definitions could be overwritten by \nrowTpl\n and \nouterTpl\n in snippet call. Both template chunks are parsed by PHx (chunkie class).\n\n\nWhere clause examples\n\n\nThe \nwhere\n parameter could be set with an JSON encoded array of where clauses. Each where clause has to use the following format: \n{\"fieldname:operator\":\"value\"}\n \nfieldname\n is the name of a multiTV field, \noperator\n is the comparing operator, \nvalue\n is the value the fieldname is compared with. Possible operators are \n=\n, \n!=\n, \n, \n, \n=\n, \n=\n, \nLIKE NOT\n, \nLIKE\n. The default operator is \n=\n.  \n\n\nwhere=`{\"price\":\"2000\"}`\n will filter all rows where the mulitTV field price is not 2000.\n\n\nwhere=`{\"city:LIKE\":\"London\"}`\n will filter all rows where the mulitTV field city does not contain London.\n\n\nMultiple where clauses are combined with \nAND\n i.e. \nwhere=`{\"city:LIKE\":\"London\",\"price\":\"2000\"}`\n will filter all rows where the mulitTV field city does not contain London and where the mulitTV field price is not 2000.\n\n\nPlaceholder\n\n\nPlaceholder in rowTpl\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\"fieldname\"\n\n\nEach fieldname defined in config file could be used\n\n\n\n\n\n\n\"property\"\n\n\nEach snippet property in snippet call could be used\n\n\n\n\n\n\niteration\n\n\nContains the iteration of the current multiTV element\n\n\n\n\n\n\nrow.number\n\n\nContains the row number of the current multiTV element\n\n\n\n\n\n\nrow.class\n\n\nFirstClass parameter setting for first displayed row, lastClass parameter setting for last displayed row, evenClass/oddClass parameter setting for even/odd rows.\n\n\n\n\n\n\nrow.total\n\n\nContains the count of all displayable rows\n\n\n\n\n\n\ndocid\n\n\nValue of docid parameter or current document id\n\n\n\n\n\n\n\n\nPlaceholder in outerTpl\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwrapper\n\n\nContains the output of all rows\n\n\n\n\n\n\n\"property\"\n\n\nEach snippet property in snippet call could be used\n\n\n\n\n\n\nrows.offset\n\n\nContains the count of rows from start that are not displayed\n\n\n\n\n\n\nrows.total\n\n\nContains the count of all displayable rows\n\n\n\n\n\n\ndocid\n\n\nValue of docid parameter or current document id\n\n\n\n\n\n\npagination\n\n\nContains the pagination (if parameter pagination is enabled)\n\n\n\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOlder MODX versions don\u2019t like =, ? and \n in snippet parameters. If the template code has to use those signs, put the template code in a chunk or change the default templates in the config file.\n\n\n\n\n\n\nIf the snippet output is assigned to placeholder and PHx is installed, the page should be set to uncached and the Snippet should be called cached. Otherwise PHx will 'steal' the placeholders before the Snippet could fill them.", 
            "title": "Snippet"
        }, 
        {
            "location": "/snippet/#snippet", 
            "text": "The multiTV snippet has to be called to display the content of a multiTV template variable. Call the snippet like this (most expample parameters are using the default values in this example call and could be removed from the call \u2013 parameter tvName is required)  [!multiTV? tvName=`yourMultiTVname` docid=`[*id*]` tplConfig=`` outerTpl=`@CODE: ul ((wrapper)) /ul ` rowTpl=`@CODE: li ((event)), ((location)), ((price)) /li ` display=`5` offset=`0` rows=`all` where=`` randomize=`0` reverse=`0` orderBy=`` toPlaceholder=`` toJson=`0` published=`1` emptyOutput=`1` noResults=`` outputSeparator=`` firstClass=`first` lastClass=`last` evenClass=`` oddClass=`` paginate=`0` offsetKey=`page`\n!]", 
            "title": "Snippet"
        }, 
        {
            "location": "/snippet/#parameters", 
            "text": "Name  Description  Default value      tvName  (required)  Name of the template variable that contains the multiTV (the column names of the mulitTV are received from the config file)  -    docid  Document id where the custom tv is retreived from (i.e. if the multiTV Snippet is called in a Ditto template)  Current document id    tplConfig  Array key in the config file that contains the output templates configuration (will be prefixed with  templates )  ''    outerTpl  Outer template: chunkname, filename (value starts with  @FILE ) or code (value starts with  @CODE  \u2013 placeholders have to be masked by  ((  and  )) . Usable  placeholders .  1  @CODE: select name=\"$tvName\" [+wrapper+] /select  or custom template in template variable config file    rowTpl  Row template: chunkname, filename (value starts with  @FILE ) or code (value starts with  @CODE  \u2013 placeholders have to be masked by  ((  and  )) . Usable  placeholders .  1  @CODE: option value=\"[+value+]\" [+key+] /option  or custom template in template variable config file    display  Count of rows that are displayed,  all  for all rows  5    offset  Count of rows from start that are not displayed  0    rows  Comma separated list of row numbers (or all rows) that should be displayed  all    where  JSON encoded array of where clauses to filter the results. Example  clauses .  -    randomize  Random order of displayed rows (disables  reverse  and  orderBy  parameter)  0    reverse  Reverse order of displayed rows (disables  orderBy  parameter)  0    orderBy  Column name, column order type and order direction to sort the output (format:  name:type direction  \u2013 type could be  text  or  date , defaults to  text  \u2013 direction defaults to  asc )  -    toPlaceholder  The snippet output is assigned to a placeholder named as the parameter value (i.e. [+myPlaceholder+]), single items are assigned to placeholders named as the parameter value followed by the row number (i.e. [+myPlaceholder.1+]). Normal snippet output is suppressed. 2  -    toJson  The snippet output contains the json encoded result of the multitv snippet call. Useful to retreive the multiTV results other snippets by runSnippet  0    published  Display only multiTVs of published (1), unpublished (0) or both (2) kind of documents  1    emptyOutput  Return empty string if the multiTV is empty, otherwise return outer template  1    noResults  No results template: chunkname, filename (value starts with  @FILE ) or code (value starts with  @CODE )  -    outputSeparator  String inserted between two row templates  empty    firstClass  Content of row.class placeholder in the first row  first    lastClass  Content of row.class placeholder in the last row  last    evenClass  Content of row.class placeholder in an even row  -    oddClass  Content of row.class placeholder in an odd row  -    paginate  Show pagination  0    offsetKey  Pagination offset parameter key  page     The default templates for outer template and row template could be defined in the config file for the custom template variable. These custom definitions could be overwritten by  rowTpl  and  outerTpl  in snippet call. Both template chunks are parsed by PHx (chunkie class).  Where clause examples  The  where  parameter could be set with an JSON encoded array of where clauses. Each where clause has to use the following format:  {\"fieldname:operator\":\"value\"}   fieldname  is the name of a multiTV field,  operator  is the comparing operator,  value  is the value the fieldname is compared with. Possible operators are  = ,  != ,  ,  ,  = ,  = ,  LIKE NOT ,  LIKE . The default operator is  = .    where=`{\"price\":\"2000\"}`  will filter all rows where the mulitTV field price is not 2000.  where=`{\"city:LIKE\":\"London\"}`  will filter all rows where the mulitTV field city does not contain London.  Multiple where clauses are combined with  AND  i.e.  where=`{\"city:LIKE\":\"London\",\"price\":\"2000\"}`  will filter all rows where the mulitTV field city does not contain London and where the mulitTV field price is not 2000.", 
            "title": "Parameters"
        }, 
        {
            "location": "/snippet/#placeholder", 
            "text": "Placeholder in rowTpl     Name  Description      \"fieldname\"  Each fieldname defined in config file could be used    \"property\"  Each snippet property in snippet call could be used    iteration  Contains the iteration of the current multiTV element    row.number  Contains the row number of the current multiTV element    row.class  FirstClass parameter setting for first displayed row, lastClass parameter setting for last displayed row, evenClass/oddClass parameter setting for even/odd rows.    row.total  Contains the count of all displayable rows    docid  Value of docid parameter or current document id     Placeholder in outerTpl     Name  Description      wrapper  Contains the output of all rows    \"property\"  Each snippet property in snippet call could be used    rows.offset  Contains the count of rows from start that are not displayed    rows.total  Contains the count of all displayable rows    docid  Value of docid parameter or current document id    pagination  Contains the pagination (if parameter pagination is enabled)      \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();        Older MODX versions don\u2019t like =, ? and   in snippet parameters. If the template code has to use those signs, put the template code in a chunk or change the default templates in the config file.    If the snippet output is assigned to placeholder and PHx is installed, the page should be set to uncached and the Snippet should be called cached. Otherwise PHx will 'steal' the placeholders before the Snippet could fill them.", 
            "title": "Placeholder"
        }, 
        {
            "location": "/module/", 
            "text": "Module\n\n\nThe multiTV Database Manager is a MODX Evolution module providing almost the same options as a multiTV Template Variable in datatable mode. The main difference is the direct access of (custom) tables in the MODX Evolution database.\n\n\nWith the Database Manager you could manage (CRUD) your own database tables and use MODX input types for managing table row fields.\n\n\nConfiguration\n\n\nEach Database Manager configuration file will create a tab in a Database Manager module if it is referenced in the module configuration. The value of \nConfigurations\n has to be filled by a comma separated list of config names in \nassets/tvs/multitv/moduleconfigs\n (i.e. event_log for referencing the event_log.moduleconfig.json)\n\n\nEach configuration file contains a JSON encoded array with the following settings:\n\n\nTable\n\n\nThe database table could be set in the key \ntable\n. The table name is prefixed by the MODX table prefix.\n\n\nCaption\n\n\nThe Database Manager module tab text and tab caption could be set in the key \ncaption\n.\n\n\nProcessors\n\n\nThe processors folder could be set in the key \nprocessors\n. If it is not set, the default processors in \nassets/tvs/multitv/processors\n are used. If it is set, the processors are retrieved from a subfolder of \nassets/tvs/multitv/processors\n named as the key value. If that subfolder does not exist, the value points to a subfolder of the MODX base path.\n\n\nThere are five processors usable at the moment. \n\n\n\n\n\n\n\n\nProcessor\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nloadtable\n\n\nLoads the current table with limit and offset into the datatable\n\n\n\n\n\n\nloadrecord\n\n\nLoads a table row into the editing layer\n\n\n\n\n\n\ncreaterecord\n\n\nCreates a new table row for the editing layer\n\n\n\n\n\n\ndeleterecord\n\n\nDeletes a table row\n\n\n\n\n\n\nsaverecord\n\n\nSaves the values of the editing layer into a table row\n\n\n\n\n\n\n\n\nFields\n\n\nThe fields of the database table could be defined in the key \nfields\n. This key contains an array of fieldnames and each fieldname contains an array of field properties.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\nCaption (horizontal) or label (vertical) for the input\n\n\n-\n\n\n\n\n\n\ntype\n\n\nType of the input (could be set to almost all MODX input types\n1\n, \nthumb\n for thumbnail display of image tvs\n2\n) and \nunixtime\n to convert the datetime table data to unixtime and vice versa\n\n\ntext\n\n\n\n\n\n\nelements\n\n\nSame options\n as in the \ninput option values\n of a MODX template variable are possible i.e. for a dropdown with all documents in the MODX root: \n@SELECT `pagetitle`, `id` FROM `modx_site_content` WHERE parent = 0 ORDER BY `menuindex` ASC\n\n\n-\n\n\n\n\n\n\ndefault\n\n\nDefault value for the input. This value could contain calculated parts. There are two placeholders available: \n{i}\n contains an autoincremented index \n{alias}\n contains the alias of the edited document.\n\n\n-\n\n\n\n\n\n\nthumbof\n\n\nName of an image input. A thumbnail of the selected image will be rendered into this area\n\n\n-\n\n\n\n\n\n\nwidth\n\n\nWidth of the input\n\n\n100\n\n\n\n\n\n\n\n\nDuring adding/editing one row a layer is displayed. In this editing layer the MODX input type richtext is not usable at the moment (degrades to textarea).\n\n\nColumns\n\n\nThe visible columns for the datatable could be defined in the key \ncolumns\n. This key contains an array of column settings. Each column setting contains an array of properties. If a property is not set, the field property in key \nfields\n is used.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nfieldname\n\n\n(required)\n Fieldname that is displayed in this column\n\n\n-\n\n\n\n\n\n\ncaption\n\n\nCaption of the column\n\n\nCaption for fieldname in \nfields\n\n\n\n\n\n\nwidth\n\n\nWidth of the column\n\n\nWidth for fieldname in \nfields\n\n\n\n\n\n\nrender\n\n\nEnable rengering of the column content with this PHx capable string\n\n\n-\n\n\n\n\n\n\n\n\nEditing Layer\n\n\nThe content of the editing layer during adding/editing one row could be defined in the key \nform\n. This key contains an array of form tab settings. \n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\n(required)\n Caption for the form tab\n\n\n-\n\n\n\n\n\n\ncontent\n\n\n(required)\n Associative array of field settings\n\n\n-\n\n\n\n\n\n\n\n\nEach form tab setting contains an associative array of field properties (the key contains the fieldname in \nfields\n). If a field property is not set, the field property in \nfields\n is used.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\nCaption for the input\n\n\nCaption for fieldname in \nfields\n\n\n\n\n\n\n\n\nButtons\n\n\nOwn buttons for the Database Manager module tab could be defined in the key \nbuttons\n. This key contains an associative array of button group configs.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nposition\n\n\n(required)\n Position of the button group (could be \ntopleft\n, \ntopright\n, \nbottomleft\n or \nbottom right\n)\n\n\n-\n\n\n\n\n\n\nbuttons\n\n\n(required)\n Associative array of button configs\n\n\n-\n\n\n\n\n\n\n\n\nEach button config contains an associative array of button settings.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\nCaption for the button\n\n\n-\n\n\n\n\n\n\nicon\n\n\nIcon for the button located in \nassets/tvs/multitv/css/images\n\n\n-\n\n\n\n\n\n\nprocessor\n\n\nname of the processor file located in \nassets/tvs/multitv/processors/[groupkey]\n (groupkey contains the group config key)\n\n\n-\n\n\n\n\n\n\nform\n\n\nArray of form tab settings (see \nEditing layer\n)\n\n\n-\n\n\n\n\n\n\n\n\nFor every button a javascript file will be included with the following path \nassets/tvs/multitv/buttons/[groupkey]/[buttonkey].button.js\n (groupkey contains the button group config key, buttonkey contains the button config key)\n\n\nExample for a generate coupons button with one group config key \ncoupons\n and one button config key \ngenerate\n. The button section could contain several group configs and each one several button configs.\n\n\n\"buttons\": {\n    \"coupons\": {\n        \"position\": \"topright\",\n        \"buttons\": {\n            \"generate\": {\n                \"caption\": \"Generate\",\n                \"icon\": \"wand.png\",\n                \"processor\": \"generate\",\n                \"form\": [\n                    {\n                        \"caption\": \"Coupon\",\n                        \"content\": {\n                            \"count\": {},\n                            \"discount\": {},\n                            \"validuser\": {},\n                            \"validgroup\": {},\n                            \"validuntil\": {},\n                            \"maxuse\": {}\n                        }\n                    }\n                ]\n            }\n        }\n    }\n},\n\n\n\nThe \nevent_log module config\n) contains a simpler example for a csvexport button.\n\n\nOther options\n\n\nThe other options for one multiTV could be defined in the key \nconfiguration\n.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nradioTabs\n\n\nTabs in the datatable editing layer are displayed as radio buttons. The button state is saved in \nfieldTab\n column of each table row (this column has to exist).\n\n\nfalse\n\n\n\n\n\n\nsorting\n\n\nEnable sorting by column header.\n\n\nfalse\n\n\n\n\n\n\nsortindex\n\n\nColumn name that ist used as sorting index. The column type has to be integer and it should contain an autoincremented index (see in \nFields\n) as default value.\n\n\nfalse\n\n\n\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSupported MODX input types: text, rawtext, email, number, textareamini, textarea, rawtextarea, htmlarea, date, dropdown, listbox, listbox-multiple, checkbox, option, image, file\n\n\n\n\n\n\nSee \nimages config\n for thumb", 
            "title": "Module"
        }, 
        {
            "location": "/module/#module", 
            "text": "The multiTV Database Manager is a MODX Evolution module providing almost the same options as a multiTV Template Variable in datatable mode. The main difference is the direct access of (custom) tables in the MODX Evolution database.  With the Database Manager you could manage (CRUD) your own database tables and use MODX input types for managing table row fields.", 
            "title": "Module"
        }, 
        {
            "location": "/module/#configuration", 
            "text": "Each Database Manager configuration file will create a tab in a Database Manager module if it is referenced in the module configuration. The value of  Configurations  has to be filled by a comma separated list of config names in  assets/tvs/multitv/moduleconfigs  (i.e. event_log for referencing the event_log.moduleconfig.json)  Each configuration file contains a JSON encoded array with the following settings:  Table  The database table could be set in the key  table . The table name is prefixed by the MODX table prefix.  Caption  The Database Manager module tab text and tab caption could be set in the key  caption .  Processors  The processors folder could be set in the key  processors . If it is not set, the default processors in  assets/tvs/multitv/processors  are used. If it is set, the processors are retrieved from a subfolder of  assets/tvs/multitv/processors  named as the key value. If that subfolder does not exist, the value points to a subfolder of the MODX base path.  There are five processors usable at the moment.      Processor  Description      loadtable  Loads the current table with limit and offset into the datatable    loadrecord  Loads a table row into the editing layer    createrecord  Creates a new table row for the editing layer    deleterecord  Deletes a table row    saverecord  Saves the values of the editing layer into a table row     Fields  The fields of the database table could be defined in the key  fields . This key contains an array of fieldnames and each fieldname contains an array of field properties.     Property  Description  Default      caption  Caption (horizontal) or label (vertical) for the input  -    type  Type of the input (could be set to almost all MODX input types 1 ,  thumb  for thumbnail display of image tvs 2 ) and  unixtime  to convert the datetime table data to unixtime and vice versa  text    elements  Same options  as in the  input option values  of a MODX template variable are possible i.e. for a dropdown with all documents in the MODX root:  @SELECT `pagetitle`, `id` FROM `modx_site_content` WHERE parent = 0 ORDER BY `menuindex` ASC  -    default  Default value for the input. This value could contain calculated parts. There are two placeholders available:  {i}  contains an autoincremented index  {alias}  contains the alias of the edited document.  -    thumbof  Name of an image input. A thumbnail of the selected image will be rendered into this area  -    width  Width of the input  100     During adding/editing one row a layer is displayed. In this editing layer the MODX input type richtext is not usable at the moment (degrades to textarea).  Columns  The visible columns for the datatable could be defined in the key  columns . This key contains an array of column settings. Each column setting contains an array of properties. If a property is not set, the field property in key  fields  is used.     Property  Description  Default      fieldname  (required)  Fieldname that is displayed in this column  -    caption  Caption of the column  Caption for fieldname in  fields    width  Width of the column  Width for fieldname in  fields    render  Enable rengering of the column content with this PHx capable string  -     Editing Layer  The content of the editing layer during adding/editing one row could be defined in the key  form . This key contains an array of form tab settings.      Property  Description  Default      caption  (required)  Caption for the form tab  -    content  (required)  Associative array of field settings  -     Each form tab setting contains an associative array of field properties (the key contains the fieldname in  fields ). If a field property is not set, the field property in  fields  is used.     Property  Description  Default      caption  Caption for the input  Caption for fieldname in  fields     Buttons  Own buttons for the Database Manager module tab could be defined in the key  buttons . This key contains an associative array of button group configs.     Property  Description  Default      position  (required)  Position of the button group (could be  topleft ,  topright ,  bottomleft  or  bottom right )  -    buttons  (required)  Associative array of button configs  -     Each button config contains an associative array of button settings.     Property  Description  Default      caption  Caption for the button  -    icon  Icon for the button located in  assets/tvs/multitv/css/images  -    processor  name of the processor file located in  assets/tvs/multitv/processors/[groupkey]  (groupkey contains the group config key)  -    form  Array of form tab settings (see  Editing layer )  -     For every button a javascript file will be included with the following path  assets/tvs/multitv/buttons/[groupkey]/[buttonkey].button.js  (groupkey contains the button group config key, buttonkey contains the button config key)  Example for a generate coupons button with one group config key  coupons  and one button config key  generate . The button section could contain several group configs and each one several button configs.  \"buttons\": {\n    \"coupons\": {\n        \"position\": \"topright\",\n        \"buttons\": {\n            \"generate\": {\n                \"caption\": \"Generate\",\n                \"icon\": \"wand.png\",\n                \"processor\": \"generate\",\n                \"form\": [\n                    {\n                        \"caption\": \"Coupon\",\n                        \"content\": {\n                            \"count\": {},\n                            \"discount\": {},\n                            \"validuser\": {},\n                            \"validgroup\": {},\n                            \"validuntil\": {},\n                            \"maxuse\": {}\n                        }\n                    }\n                ]\n            }\n        }\n    }\n},  The  event_log module config ) contains a simpler example for a csvexport button.  Other options  The other options for one multiTV could be defined in the key  configuration .     Property  Description  Default      radioTabs  Tabs in the datatable editing layer are displayed as radio buttons. The button state is saved in  fieldTab  column of each table row (this column has to exist).  false    sorting  Enable sorting by column header.  false    sortindex  Column name that ist used as sorting index. The column type has to be integer and it should contain an autoincremented index (see in  Fields ) as default value.  false      \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();        Supported MODX input types: text, rawtext, email, number, textareamini, textarea, rawtextarea, htmlarea, date, dropdown, listbox, listbox-multiple, checkbox, option, image, file    See  images config  for thumb", 
            "title": "Configuration"
        }, 
        {
            "location": "/extras/", 
            "text": "PHx modifier\n\n\nSince the JSON string in multiTV starts with \n[[\n and ends with \n]]\n1\n, you \ncan't\n check if the multiTV is empty by i.e. \n[*multittvname:ne=``:then=`not empty`*]\n.\n\n\nBut you could to use the PHx modifier in the folder \nphx-modifier\n in that case. Move the two files to \nassets/plugins/phx/modifiers\n and call it like this \n[+phx:multitvisempty=`tvname|docid`:then=`xxx`:else=`yyy`+]\n or like this \n[+phx:multitvisnotempty=`tvname|docid`:then=`xxx`:else=`yyy`+]\n. If docid is not set it defaults to current document.\n\n\nDitto filter extender\n\n\nIf you want to filter displayed Ditto rows by the values of multiTV field content, you could use the Ditto multitv filter extender. As all other Ditto filters it filters the row away if the condition is true.\n\n\nThe extender uses the following parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmultiTvFilterBy\n\n\nmultiTV name to filter by (required)\n\n\n\n\n\n\nmultiTvFilterOptions\n\n\n(Array of) json encoded object(s) of filter options\n\n\n\n\n\n\n\n\nThe following \nfilter options\n could be used\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nmulitTV field name that is used for filtering\n\n\n\n\n\n\ntype\n\n\nType of the multiTV field content (possible content: date, text)\n\n\n\n\n\n\nvalue\n\n\nThe value the multiTV field content is filtered with\n\n\n\n\n\n\nmode\n\n\nMode for filtering the multiTV field content\n\n\n\n\n\n\nconjunction\n\n\nLogical conjunction with the previous filter result (AND/OR)\n\n\n\n\n\n\n\n\nThe following modes could be used for \ntext\n type:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontains\n\n\nfiltered if one value contains filterValue\n\n\n\n\n\n\nallcontains\n\n\nfiltered if all values containing filterValue\n\n\n\n\n\n\ncontainsnot\n\n\nfiltered if one value not contains filterValue\n\n\n\n\n\n\nallcontainsnot\n\n\nfiltered if all values not containing filterValue\n\n\n\n\n\n\nis\n\n\nfiltered if one value is filterValue\n\n\n\n\n\n\nallis\n\n\nfiltered if all values are filterValue\n\n\n\n\n\n\nisnot\n\n\nfiltered if one value is not filterValue\n\n\n\n\n\n\nallisnot\n\n\nfiltered if all values are not filterValue\n\n\n\n\n\n\n\n\nThe following modes could be used for \ndate\n type:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbefore\n\n\nfiltered if one value is before filterValue\n\n\n\n\n\n\nbeforeall\n\n\nfiltered if all values are before filterValue\n\n\n\n\n\n\nequal\n\n\nfiltered if one value is equal filterValue\n\n\n\n\n\n\nequalall\n\n\nfiltered if all values are equal filterValue\n\n\n\n\n\n\nafter\n\n\nfiltered if one value is after filterValue\n\n\n\n\n\n\nafterall\n\n\nfiltered if one value is after filterValue\n\n\n\n\n\n\n\n\nExamples\n\n\nThe following example displays all documents within containers 3, 4, and 5 where the multiTV \nevent\n values in column \ntitle\n not containing \nImportant\n in any multiTV row.\n\n\n[[Ditto?\n\nparents=`3,4,5`\n\ndisplay=`all`\n\ntpl=`...`\n\nextenders=`@FILE assets/tvs/multitv/dittoExtender/multitvfilter.extender.inc.php`\n\nmultiTvFilterBy=`event`\n\nmultiTvFilterOptions=`[{\nname\n:\ntitle\n,\ntype\n:\ntext\n,\nvalue\n:\nImportant\n,\nmode\n:\ncontains\n}]`]]\n]]\n\n\n\n\nIf you want to filter Ditto by several multiTV values, you ave to append an option object to the \nmultiTvFilterOptions\n. The next example will display all documents within containers 3, 4, and 5 where the multiTV \nevent\n values in column \ntitle\n not containing \nImportant\n and column \nlocation\n is \nOutdoor\n in any multiTV row.\n\n\n[[Ditto?\n\nparents=`3,4,5`\n\ndisplay=`all`\n\ntpl=`...`\n\nextenders=`@FILE assets/tvs/multitv/dittoExtender/multitvfilter.extender.inc.php`\n\nmultiTvFilterBy=`event,event`\n\nmultiTvFilterOptions=`[{\nname\n:\ntitle\n,\ntype\n:\ntext\n,\nvalue\n:\nImportant\n,\nmode\n:\ncontains\n},{\nname\n:\nlocation\n,\ntype\n:\ntext\n,\nvalue\n:\nOutdoor\n,\nmode\n:\nallisnot\n,\nconjunction\n:\nOR\n}]`]]\n]]\n\n\n\n\nUpdate to the new data format\n\n\nVersion 1.4.11 of multiTV uses a new data format (the column names are saved as key with each value). The custom tv and the snippet code supports the old and new format, so you don't have to update your multiTVs. It is only nessesary, if you want to add/remove columns in your multiTVs.\n\n\nCreate a new snippet called updateTV with the following snippet code\n\n\n?php\nreturn include(MODX_BASE_PATH.'assets/tvs/multitv/updatetv.snippet.php');\n?\n\n\n\n\n\nCall the snippet on one (temporary) MODX document like this:\n\n\n[!updateTV?\n\ntvNames=`yourMultiTVname1,yourMultiTVname2`\n!]\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntvNames\n\n\n(required)\n comma separated list of template variable names that contain multiTV data\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe JSON string the multitv is converted to starts with \n[[\n and ends with \n]]\n so the MODX parser thinks it contains a snippet and you can't place the template variable directly in the template.", 
            "title": "Extras"
        }, 
        {
            "location": "/extras/#phx-modifier", 
            "text": "Since the JSON string in multiTV starts with  [[  and ends with  ]] 1 , you  can't  check if the multiTV is empty by i.e.  [*multittvname:ne=``:then=`not empty`*] .  But you could to use the PHx modifier in the folder  phx-modifier  in that case. Move the two files to  assets/plugins/phx/modifiers  and call it like this  [+phx:multitvisempty=`tvname|docid`:then=`xxx`:else=`yyy`+]  or like this  [+phx:multitvisnotempty=`tvname|docid`:then=`xxx`:else=`yyy`+] . If docid is not set it defaults to current document.", 
            "title": "PHx modifier"
        }, 
        {
            "location": "/extras/#ditto-filter-extender", 
            "text": "If you want to filter displayed Ditto rows by the values of multiTV field content, you could use the Ditto multitv filter extender. As all other Ditto filters it filters the row away if the condition is true.  The extender uses the following parameters     Name  Description      multiTvFilterBy  multiTV name to filter by (required)    multiTvFilterOptions  (Array of) json encoded object(s) of filter options     The following  filter options  could be used     Name  Description      name  mulitTV field name that is used for filtering    type  Type of the multiTV field content (possible content: date, text)    value  The value the multiTV field content is filtered with    mode  Mode for filtering the multiTV field content    conjunction  Logical conjunction with the previous filter result (AND/OR)     The following modes could be used for  text  type:     Name  Description      contains  filtered if one value contains filterValue    allcontains  filtered if all values containing filterValue    containsnot  filtered if one value not contains filterValue    allcontainsnot  filtered if all values not containing filterValue    is  filtered if one value is filterValue    allis  filtered if all values are filterValue    isnot  filtered if one value is not filterValue    allisnot  filtered if all values are not filterValue     The following modes could be used for  date  type:     Name  Description      before  filtered if one value is before filterValue    beforeall  filtered if all values are before filterValue    equal  filtered if one value is equal filterValue    equalall  filtered if all values are equal filterValue    after  filtered if one value is after filterValue    afterall  filtered if one value is after filterValue     Examples  The following example displays all documents within containers 3, 4, and 5 where the multiTV  event  values in column  title  not containing  Important  in any multiTV row.  [[Ditto? parents=`3,4,5` display=`all` tpl=`...` extenders=`@FILE assets/tvs/multitv/dittoExtender/multitvfilter.extender.inc.php` multiTvFilterBy=`event` multiTvFilterOptions=`[{ name : title , type : text , value : Important , mode : contains }]`]]\n]]  If you want to filter Ditto by several multiTV values, you ave to append an option object to the  multiTvFilterOptions . The next example will display all documents within containers 3, 4, and 5 where the multiTV  event  values in column  title  not containing  Important  and column  location  is  Outdoor  in any multiTV row.  [[Ditto? parents=`3,4,5` display=`all` tpl=`...` extenders=`@FILE assets/tvs/multitv/dittoExtender/multitvfilter.extender.inc.php` multiTvFilterBy=`event,event` multiTvFilterOptions=`[{ name : title , type : text , value : Important , mode : contains },{ name : location , type : text , value : Outdoor , mode : allisnot , conjunction : OR }]`]]\n]]", 
            "title": "Ditto filter extender"
        }, 
        {
            "location": "/extras/#update-to-the-new-data-format", 
            "text": "Version 1.4.11 of multiTV uses a new data format (the column names are saved as key with each value). The custom tv and the snippet code supports the old and new format, so you don't have to update your multiTVs. It is only nessesary, if you want to add/remove columns in your multiTVs.  Create a new snippet called updateTV with the following snippet code  ?php\nreturn include(MODX_BASE_PATH.'assets/tvs/multitv/updatetv.snippet.php');\n?   Call the snippet on one (temporary) MODX document like this:  [!updateTV? tvNames=`yourMultiTVname1,yourMultiTVname2`\n!]", 
            "title": "Update to the new data format"
        }, 
        {
            "location": "/extras/#parameters", 
            "text": "Name  Description  Default value      tvNames  (required)  comma separated list of template variable names that contain multiTV data  -      \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();        The JSON string the multitv is converted to starts with  [[  and ends with  ]]  so the MODX parser thinks it contains a snippet and you can't place the template variable directly in the template.", 
            "title": "Parameters"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\nSortable Sidebar\n\n\nRequirements\n\n\n\n\nConfig: \nsidebar config\n\n\nTemplate Variable: sidebar\n\n\nExtras: \nQuill\n\n\n\n\nUsage\n\n\n[!Ditto?\n\ndocuments=`[[multiTV? \ntvName=`sidebar`]]`\n\noutputSeparator=`,`\n\nextenders=`@FILE assets/tvs/multitv/dittoExtender/customsort.extender.inc.php`\n\ntpl=`\u2026`!]\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#sortable-sidebar", 
            "text": "Requirements   Config:  sidebar config  Template Variable: sidebar  Extras:  Quill   Usage  [!Ditto? documents=`[[multiTV?  tvName=`sidebar`]]` outputSeparator=`,` extenders=`@FILE assets/tvs/multitv/dittoExtender/customsort.extender.inc.php` tpl=`\u2026`!]   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Sortable Sidebar"
        }, 
        {
            "location": "/contributors/", 
            "text": "Contributors\n\n\nThe MultiTV project was started in 2012 and it is maintained and developed further by \nThomas Jakobi\n.\n\n\nMany thanks to everyone who has contributed to this project:\n\n\n\n\nMarek Srejma\n\n\nIdeas for limit and toPlaceholder parameter\n\n\nCode for sorting the output\n\n\n\n\n\n\nDanilo Cuculi\u0107\n\n\nIdea for tplConfig parameter\n\n\nSome Output enhancements\n\n\nBetter ManagerManager fix (fixed MODX 1.0.9)\n\n\n\n\n\n\nCipa\n\n\nBugfixes for MODX installations not in webroot\n\n\n\n\n\n\nJukka Hankaniemi\n\n\nFinnish language\n\n\n\n\n\n\nDmytro Lukianenko\n\n\nRussian language\n\n\n\n\n\n\nSalvatore Tedde\n\n\nBetter styling of the editing layer\n\n\nItalian Language\n\n\nA lot of testing for ClipperCMS\n\n\n\n\n\n\nVitor\n\n\nPortuguese language\n\n\n\n\n\n\nfalkon\n\n\nBugfix\n\n\n\n\n\n\nBruno Perner\n\n\nDitto customsort extender\n\n\n\n\n\n\nWitek Galecki\n\n\nPolish language\n\n\nOption to enable dataTable sorting by column headers\n\n\n\n\n\n\nMarc\n\n\nDutch language\n\n\n\n\n\n\nPontus \u00c5gren\n\n\nSwedish language\n\n\n\n\n\n\n\n\nAnd a lot of testers ...\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Contributors"
        }, 
        {
            "location": "/contributors/#contributors", 
            "text": "The MultiTV project was started in 2012 and it is maintained and developed further by  Thomas Jakobi .  Many thanks to everyone who has contributed to this project:   Marek Srejma  Ideas for limit and toPlaceholder parameter  Code for sorting the output    Danilo Cuculi\u0107  Idea for tplConfig parameter  Some Output enhancements  Better ManagerManager fix (fixed MODX 1.0.9)    Cipa  Bugfixes for MODX installations not in webroot    Jukka Hankaniemi  Finnish language    Dmytro Lukianenko  Russian language    Salvatore Tedde  Better styling of the editing layer  Italian Language  A lot of testing for ClipperCMS    Vitor  Portuguese language    falkon  Bugfix    Bruno Perner  Ditto customsort extender    Witek Galecki  Polish language  Option to enable dataTable sorting by column headers    Marc  Dutch language    Pontus \u00c5gren  Swedish language     And a lot of testers ...   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Contributors"
        }, 
        {
            "location": "/donate/", 
            "text": "Donate\n\n\nmultiTV is totally free and comes with no warranty or support. I give basic support on github tracker and like to receive suggestions for enhancements there.\n\n\nI work on new features and bug fixes in my spare time (and if one of my clients needs a special feature). So maybe a bugfix or an answer could take some time and unfortunately some enhancement wishes won't get addressed.\n\n\nIf multiTV is useful for you, I\u2019d like to hear about that as well. Donations for multiTV are appreciated. Please feel free to donate any amount that that you like to give for your multiTV usage.\n\n\nmultiTV is free because I have fun working on it and because I don't have the resources to properly support it. If you decide to make a donation, I thank you very much. But please remember that I'm not able to extend my support for multiTV beyond the level I have done in the past.\n\n\n\n\nIf you urgently need an addition to multiTV code, you could hire me for that work for sure. My email address could be found on my \ngithub page\n.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Donate"
        }, 
        {
            "location": "/donate/#donate", 
            "text": "multiTV is totally free and comes with no warranty or support. I give basic support on github tracker and like to receive suggestions for enhancements there.  I work on new features and bug fixes in my spare time (and if one of my clients needs a special feature). So maybe a bugfix or an answer could take some time and unfortunately some enhancement wishes won't get addressed.  If multiTV is useful for you, I\u2019d like to hear about that as well. Donations for multiTV are appreciated. Please feel free to donate any amount that that you like to give for your multiTV usage.  multiTV is free because I have fun working on it and because I don't have the resources to properly support it. If you decide to make a donation, I thank you very much. But please remember that I'm not able to extend my support for multiTV beyond the level I have done in the past.   If you urgently need an addition to multiTV code, you could hire me for that work for sure. My email address could be found on my  github page .   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 12]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Donate"
        }
    ]
}